<!--
  ~ build.xml
  ~
  ~ BEAST: Bayesian Evolutionary Analysis by Sampling Trees
  ~ Copyright (C) 2014 BEAST Developers
  ~
  ~ BEAST is free software: you can redistribute it and/or modify it
  ~ under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License,
  ~ or (at your option) any later version.
  ~
  ~ BEAST is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with BEAST.  If not, see <http://www.gnu.org/licenses/>.
  -->

<project name="BEAST" default="build" basedir=".">

    <property name="JDK_VERSION" value="1.8"/>

    <property name="src" location="src"/>
    <property name="lib" location="lib"/>
	<property name="test-lib" location="test-lib"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>
	<property name="test" location="test"/>
	<property name="build-test" location="build-test"/>
	<property name="reports" location="reports"/>
	<property name="debug" value="true"/>

	<available file=".git" type="dir" property="git-available"/>
	<property name="version.properties"
		      value="${src}/beast/app/beast/version.properties"/>

    <property name="BEAST_main" value="beast.app.beast.BeastMain"/>

	<target name="init">
		<condition property="lib-unavailable">
			<not>
				<available file="${lib}"/>
			</not>
		</condition>
		<condition property="test-lib-unavailable">
			<not>
				<available file="${test-lib}"/>
			</not>
		</condition>
	</target>

	<target name="get-dependencies" depends="init" if="lib-unavailable">
		<mkdir dir="${lib}"/>
  		<get src="http://search.maven.org/remotecontent?filepath=org/ow2/asm/asm/5.0.3/asm-5.0.3.jar"
  			 dest="${lib}/asm.jar"/>
		<get src="http://beast-mcmc.googlecode.com/svn/trunk/lib/beagle.jar"
			 dest="${lib}/beagle.jar"/>
 		<get src="http://search.maven.org/remotecontent?filepath=org/apache/commons/commons-math3/3.4.1/commons-math3-3.4.1.jar"
 			 dest="${lib}/commons-math3.jar"/>
	 	<get src="http://search.maven.org/remotecontent?filepath=com/esotericsoftware/kryo/3.0.0/kryo-3.0.0.jar"
	 		 dest="${lib}/kryo.jar"/>
 		<get src="http://sourceforge.net/projects/jebl/files/latest/download"
			 dest="${lib}/jebl.jar"/>
  		<get src="http://search.maven.org/remotecontent?filepath=net/java/dev/jna/jna/4.1.0/jna-4.1.0.jar"
  			 dest="${lib}/jna.jar"/>
  		<get src="http://search.maven.org/remotecontent?filepath=com/esotericsoftware/minlog/1.3.0/minlog-1.3.0.jar"
 			 dest="${lib}/minlog.jar"/>
   		<get src="http://search.maven.org/remotecontent?filepath=org/objenesis/objenesis/2.1/objenesis-2.1.jar"
  			 dest="${lib}/objenesis.jar"/>
 		<get src="http://search.maven.org/remotecontent?filepath=/com/esotericsoftware/reflectasm/reflectasm/1.09/reflectasm-1.09.jar"
 			 dest="${lib}/reflectasm.jar"/>
	</target>

	<target name="get-test-dependencies" depends="init" if="test-lib-unavailable">
		<mkdir dir="${test-lib}"/>
        <get src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"
             dest="${test-lib}/junit.jar"/>
        <get src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
             dest="${test-lib}/hamcrest-core.jar"/>
	</target>

    <target name="clean">
		<delete dir="${lib}"/>
		<delete dir="${test-lib}"/>
        <delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${reports}"/>
    </target>

    <target name="build" depends="compile,dist"/>

    <target name="compile" depends="get-dependencies">
        <mkdir dir="${build}"/>
        <javac source="${JDK_VERSION}"
			   target="${JDK_VERSION}"
			   srcdir="${src}"
			   destdir="${build}"
               fork="true"
			   includeantruntime="false"
			   debug="${debug}">
            <classpath>
				<fileset dir="${lib}"/>
			</classpath>
        </javac>
    </target>

    <target name="dist" depends="compile,get-revision">
		<propertyfile file="${version.properties}">
			<entry key="revision" value="${revision}"/>
		</propertyfile>
        <mkdir dir="${dist}"/>
        <jar jarfile="${dist}/beast.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${BEAST_main}"/>
            </manifest>
            <fileset dir="${build}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${src}">
                <include name="**/*.png"/>
                <include name="**/*.properties"/>
            </fileset>
            <zipgroupfileset dir="${lib}" includes="*.jar"/>
        </jar>
		<delete file="${version.properties}"/>
    </target>

    <target name="compile-test" depends="get-test-dependencies">
        <mkdir dir="${build-test}"/>
        <javac source="${JDK_VERSION}"
			   target="${JDK_VERSION}"
			   srcdir="${test}"
			   destdir="${build-test}"
               fork="true"
			   includeantruntime="false"
			   debug="true">
            <classpath>
				<pathelement path="${build}"/>
				<fileset dir="${lib}"/>
				<fileset dir="${test-lib}"/>
			</classpath>
        </javac>
    </target>

    <target name="test" depends="compile,compile-test">
		<mkdir dir="${reports}"/>
		<junit printsummary="yes" failureproperty="failed">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<fileset dir="${lib}"/>
				<fileset dir="${test-lib}"/>
			</classpath>
			<batchtest fork="yes" todir="${reports}">
				<fileset dir="${test}" includes="**/*Test.java"/>
				<formatter type="plain"/>
			</batchtest>
		</junit>
		<fail if="failed" status="1"/>
    </target>

	<target name="get-revision" if="git-available">
	    <exec executable="git"
			  outputproperty="git.revision"
			  failifexecutionfails="false"
			  errorproperty="">
	        <arg value="describe"/>
	        <arg value="--tags"/>
	        <arg value="--always"/>
	        <arg value="HEAD"/>
	    </exec>
		<condition property="revision" value="${git.revision}" else="???">
			<and>
				<isset property="git.revision"/>
				<length string="${git.revision}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
	</target>

</project>
